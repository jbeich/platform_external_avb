{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "febe0a46_e2acd619",
        "filename": "rust/src/cert.rs",
        "patchSetId": 2
      },
      "lineNbr": 111,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-04-12T23:23:41Z",
      "side": 1,
      "message": "The `ATX` -\u003e `Cert` [rename CL](https://r.android.com/3034058) landed so this CL has also been updated as needed.\n\nAt this point it\u0027s probably easier just to diff this patchset against the base rather than PS1 due to the renaming and combining the internal structs.",
      "range": {
        "startLine": 111,
        "startChar": 10,
        "endLine": 111,
        "endChar": 17
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683add66_6bd693c1",
        "filename": "rust/src/cert.rs",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-04-17T09:12:20Z",
      "side": 1,
      "message": "Why changing this one to Ops? Shouldn\u0027t it be consistent with the C API [1]?\n\n[1] https://cs.android.com/android/platform/superproject/main/+/main:external/avb/libavb_cert/avb_cert_validate.h;l\u003d81;drc\u003d1bbcd661f0afe4ab56c7031f57d518a19015805e",
      "range": {
        "startLine": 248,
        "startChar": 19,
        "endLine": 248,
        "endChar": 22
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f016bafb_9441668f",
        "filename": "rust/src/cert.rs",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-04-17T20:17:32Z",
      "side": 1,
      "message": "Good catch, in this case it\u0027s a mistake in the C API. The C API defines these three functions:\n\n1. `validate_vbmeta_public_key()`: requires both Ops+CertOps; takes in *Ops*\n2. `generate_unlock_challenge()`: requires CertOps only; takes in CertOps\n3. `validate_unlock_credential()`: requires both Ops+CertOps; takes in *CertOps*\n\nSince 1 \u0026 3 have the same ops requirements, they should be taking in the same parameter. It doesn\u0027t matter too much in C because circular references are easy so you can trivially jump between `Ops` and `CertOps`, but in Rust if we took in `CertOps` here it would be very difficult to get back to the `Ops` class, likely requiring the user to do some unsafe internal circular references.\n\nI\u0027ll add a comment here to explain why we differ from the C API.",
      "parentUuid": "683add66_6bd693c1",
      "range": {
        "startLine": 248,
        "startChar": 19,
        "endLine": 248,
        "endChar": 22
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68407fd4_4b55f30a",
        "filename": "rust/src/cert.rs",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-04-18T12:26:33Z",
      "side": 1,
      "message": "Ack. Thank you!",
      "parentUuid": "f016bafb_9441668f",
      "range": {
        "startLine": 248,
        "startChar": 19,
        "endLine": 248,
        "endChar": 22
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aae23c8d_1cde6fc3",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-04-17T09:12:20Z",
      "side": 1,
      "message": "This is not a \"get\" function, it has several side effects such as setting up the circular references in the struct. A more descriptive name that highlights the side effects and setup performed would be better, perhaps `setup_avb_ops_and_cert_ops`?\n\nCan we keep the original `as_mut` impl and just add a function here to set up the ops?",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2579787_0e6cd4b1",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-04-17T20:17:32Z",
      "side": 1,
      "message": "`setup_avb_ops_and_cert_ops()` SGTM.\n\nI wanted to avoid a separate `setup_ops()` + `as_mut()` just because it\u0027s one more thing the call sites have to manually remember to get right. This single function makes it impossible to forget to call the setup function, and also makes the pinning logic a little simpler since there\u0027s only this single place where the struct needs to be pinned.",
      "parentUuid": "aae23c8d_1cde6fc3",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c717b93_f081b1a0",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-04-18T12:26:33Z",
      "side": 1,
      "message": "Frankly, I think it would be better to separate the setup function from the getter for the `AvbOps` reference. There are two problems with mixing an action function and a getter:\n\n1. It\u0027s difficult to find a correct, descriptive name for the function that encompasses both the setup and the getter.\n2. If you need to retrieve the AvbOps reference again, you\u0027d have to go through the setup process again, which is unnecessary.\n\nWhat about creating a separate, static function like `new_ops_bridge` that constructs a pinned `OpsBridge` instance and sets up all the necessary circular pointers? Then, we can use the original `AsMut` to retrieve `AvbOps` reference as needed, without repeating the setup logic.",
      "parentUuid": "a2579787_0e6cd4b1",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3f09d70_ffe92869",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-04-23T00:01:47Z",
      "side": 1,
      "message": "\u003e What about creating a separate, static function like new_ops_bridge that constructs a pinned OpsBridge instance and sets up all the necessary circular pointers?\n\nUnfortunately I don\u0027t think it\u0027s possible to return a stack-pinned object from a function, a `Pin` doesn\u0027t own the object but only a reference to it, so trying to create an object on the stack in a function and return a `Pin` to it would be a dangling reference.\n\nWe could probably create a macro to do this, since the macro executes in the caller\u0027s frame directly rather than trying to return a value from a function. I\u0027m not sure it would be worth the complexity of defining the macro though.\n\nIMO the compile-time-enforced correctness of this approach is worth doing a small amount of work inside an accessor, but I\u0027ve also uploaded a version with a separate init function (patch set 6) and if you strongly prefer it we can go that way.",
      "parentUuid": "8c717b93_f081b1a0",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec0699ac_4a932c8b",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-04-23T14:25:10Z",
      "side": 1,
      "message": "\u003e We could probably create a macro to do this..\n\nmacro is not recommended in android. See go/android-rust-style#macros.\n\nThe current approach is okay.",
      "parentUuid": "d3f09d70_ffe92869",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5d6ccfb_a63b8010",
        "filename": "rust/src/ops.rs",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-04-23T17:12:46Z",
      "side": 1,
      "message": "Ack thanks, good to know about macros.\n\nI\u0027m reading \"current approach\" to mean patchset 2 where this comment thread is, rather than the latest patchset, but if I misunderstood please let me know and I will post a follow-up CL to switch to the approach in patchset 6. I also modified the name slightly to try to address the naming concern. Thanks!",
      "parentUuid": "ec0699ac_4a932c8b",
      "range": {
        "startLine": 347,
        "startChar": 18,
        "endLine": 347,
        "endChar": 21
      },
      "revId": "aa5a149915034efe249fbb2a9d02fe994df88a8e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}