{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "51acea59_7543f90a",
        "filename": "libavb/avb_crypto.h",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "nit: keep alphabetical",
      "range": {
        "startLine": 33,
        "startChar": 10,
        "endLine": 33,
        "endChar": 17
      },
      "fixSuggestions": [
        {
          "fixId": "8104c6aa_e760bc71",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libavb/avb_crypto.h",
              "range": {
                "startLine": 32,
                "startChar": 0,
                "endLine": 33,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "libavb/avb_crypto.h",
              "range": {
                "startLine": 34,
                "startChar": 0,
                "endLine": 34,
                "endChar": 0
              },
              "replacement": "#include \"avb_sysdeps.h\"\n"
            }
          ]
        }
      ],
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6f5fbf9_f1b8d125",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "nit: \"must\" makes it sounds like a requirement on the user, but this is instead a guarantee of libavb to make implementation easier - maybe instead something like \"libavb will always call this interface in this order:\"?",
      "range": {
        "startLine": 99,
        "startChar": 9,
        "endLine": 99,
        "endChar": 13
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c325eb71_8727ed06",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "super nit: function documentation should be in active voice e.g. \"Starts a new hash session\" rather than \"start a new hash session\" (https://google.github.io/styleguide/cppguide.html#Function_Comments)",
      "range": {
        "startLine": 108,
        "startChar": 5,
        "endLine": 108,
        "endChar": 10
      },
      "fixSuggestions": [
        {
          "fixId": "c9d3808f_6f7d92f8",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "libavb/avb_ops.h",
              "range": {
                "startLine": 100,
                "startChar": 0,
                "endLine": 103,
                "endChar": 0
              },
              "replacement": " * 1. init     - Starts a new hash session\n * 2. update   - Adds data to hash (can be called multiple times)\n * 3. finalize - Completes and outputs the hash result\n"
            },
            {
              "path": "libavb/avb_ops.h",
              "range": {
                "startLine": 108,
                "startChar": 0,
                "endLine": 109,
                "endChar": 0
              },
              "replacement": "  // Starts a new hash session\n"
            },
            {
              "path": "libavb/avb_ops.h",
              "range": {
                "startLine": 111,
                "startChar": 0,
                "endLine": 112,
                "endChar": 0
              },
              "replacement": "  // Adds data to the hash\n"
            },
            {
              "path": "libavb/avb_ops.h",
              "range": {
                "startLine": 114,
                "startChar": 0,
                "endLine": 115,
                "endChar": 0
              },
              "replacement": "  // Completes the hash and outputs the result\n"
            }
          ]
        }
      ],
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1afa8cc_14ef7efc",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "We should document the ownership model and lifetime of this data, e.g. I assume the implementation needs to ensure this data stays valid and unchanged until the next call to `init`?\n\nIf we always copy this data to a separate buffer anyway, it might simplify the API to provide a buffer instead and have the `AvbHashOps` do the copy into the destination buffer. That way there\u0027s no leaking of ownership out of this interface and the memory model becomes simpler.",
      "range": {
        "startLine": 115,
        "startChar": 43,
        "endLine": 115,
        "endChar": 67
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a3de281_eb33cd78",
        "filename": "libavb/avb_sha.c",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "I think it\u0027s still valuable to keep these in the header, even though they aren\u0027t called outside this file, because for libavb users that choose to keep this legacy method these are the exact APIs they need to implement. Keeping them in the .h instead of the implementation makes this more obvious and discoverable.",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 42,
        "endChar": 73
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3228c639_99a0908d",
        "filename": "libavb/avb_slot_verify.h",
        "patchSetId": 4
      },
      "lineNbr": 315,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "nit: `hash_ops`",
      "range": {
        "startLine": 315,
        "startChar": 3,
        "endLine": 315,
        "endChar": 6
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a2a4a92_f55abefb",
        "filename": "libavb/avb_vbmeta_image.h",
        "patchSetId": 4
      },
      "lineNbr": 287,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "nit: `hash_ops`",
      "range": {
        "startLine": 287,
        "startChar": 3,
        "endLine": 287,
        "endChar": 6
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9537564a_701f2d4f",
        "filename": "libavb_cert/avb_cert_validate.c",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "We\u0027re just ignoring these return values here, I think we should either:\n\n1. Check the return values and bubble up the error here if it fails, or\n2. Make the API return void to indicate it cannot fail\n\n#1 seems a little simpler, since for cases like UEFI we can\u0027t guarantee that the hash will succeed and we\u0027d have to do something a little trickier in this case (or I suppose we could just require a panic if hashing fails)",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 64,
        "endChar": 58
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1022c1a_d6d8b228",
        "filename": "rust/src/hash.rs",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-11-08T18:00:20Z",
      "side": 1,
      "message": "For enums that don\u0027t need particular special handling, so far we\u0027ve just opted to expose them directly even though it results in some slightly non-idiomatic `ALL_CAPS` naming, e.g. https://cs.android.com/android/platform/superproject/main/+/main:external/avb/rust/src/verify.rs;l\u003d43.\n\nSeems worth it to avoid a bunch of unnecessary boilerplate to convert between two mostly-identical types, if it works here.",
      "range": {
        "startLine": 22,
        "startChar": 9,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "1b4d09ea2b7f99e0d0a8cc9aabcf260ff6c959e8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}