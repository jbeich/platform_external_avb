{
  "comments": [
    {
      "key": {
        "uuid": "008eb2ff_f748256c",
        "filename": "Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "This should go before libavb_atx_host. Things are in lexical order.",
      "range": {
        "startLine": 289,
        "startChar": 0,
        "endLine": 289,
        "endChar": 27
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c62fd5d8_f1394b49",
        "filename": "Android.bp",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "This should go before the test/avb_atx_validate_unittest.cc",
      "range": {
        "startLine": 307,
        "startChar": 0,
        "endLine": 307,
        "endChar": 45
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c482b526_6a1430f8",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Shouldn\u0027t this and the next line be uint32_t? In the aftltool we defined it as unsigned long:\n\n  FORMAT_STRING \u003d (\u0027!4s2L\u0027  # magic, major \u0026 minor version\n                   \u0027H\u0027)     # number of inclusion proof entries",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 45,
        "endChar": 9
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fee2887c_31bacd44",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "s/avb_icp_size/aftl_icp_size/\n\nIs this the size in bytes of all the AftlIcpEntries?",
      "range": {
        "startLine": 47,
        "startChar": 11,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd17eba7_9b37c4c6",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "The moved the directory. It is now at:\nhttps://github.com/google/trillian/blob/master/trillian.proto#L255",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 75
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce0cc3b_96d72ab6",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Wouldn\u0027t it be better to make this a uint8_t*? The trillian proto leaves open how large the hash is: https://github.com/google/trillian/blob/master/trillian.proto#L243",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 58,
        "endChar": 36
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3e50746_28cbe921",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Above this field there is a revision field with 8 bytes:\nhttps://github.com/google/trillian/blob/master/trillian.proto#L262",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 25
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e941b0a_df34275b",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Do we still need that? The AftlIcpHeader already has the icp_count to say how many AftlIcpEntries there.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 15
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bd3b67a_c48eaa38",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "May be good to have a log_root_descriptor_size field just above this that contains the size of the descriptor.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 73,
        "endChar": 48
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3c02d14_58afa146",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Wouldn\u0027t it be cleaner to have a struct for fw_info_leaf and then access the field properly then just assuming it is the first bytes?",
      "range": {
        "startLine": 42,
        "startChar": 42,
        "endLine": 42,
        "endChar": 54
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9c9cff4_f487785d",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "s/hash/log_root_hash/ to make it clearer what is hashed.",
      "range": {
        "startLine": 76,
        "startChar": 10,
        "endLine": 76,
        "endChar": 14
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdfc0268_3cb174dd",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "This is fragile. I would just define a log_root_descriptor_size in the AvbIcpEntry that directly contains the correct size that gets filled in the aftltool when creating the AvbIcpEntry.\n\nAlso the calculation also doesn\u0027t look correct to me. Wouldn\u0027t it be:\n11 + log_root_descriptor.root_hash_size  + 18 + log_root_descriptor.metadata_size",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 63
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc0410bd_263d88fb",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "This comment does not seem to match what is happening below.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 57
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adcba4f1_068984bf",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "s/sha256/SHA256/",
      "range": {
        "startLine": 103,
        "startChar": 14,
        "endLine": 103,
        "endChar": 20
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c474889d_d91faaac",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Similar comment as on line 87: Introducing a log_root_descriptor_size in the AvbIcpEntry would solve this without having to recalculate this using pointer arithmetics.",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 66
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e94b7fdc_86d2230f",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "For the rfc6962_hash_leaf you are using uint8_t*. Maybe make things consistent between the two functions?",
      "range": {
        "startLine": 163,
        "startChar": 27,
        "endLine": 163,
        "endChar": 55
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ba5d94_51f4d7fb",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Why do you need to copy this into h? Can\u0027t proof[i] directly feed it into rfc6962_hash_children?\n\nrfc6962_hash_children(proof[i], AFTL_HASH_SIZE, tmp, AFTL_HASH_SIZE, tmp_hash);",
      "range": {
        "startLine": 211,
        "startChar": 0,
        "endLine": 211,
        "endChar": 44
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27a2abf0_71988559",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Same comment as on 211.",
      "range": {
        "startLine": 238,
        "startChar": 0,
        "endLine": 238,
        "endChar": 44
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c090d5e_f5ba42ad",
        "filename": "libavb_aftl/avb_aftl_validate.c",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "s/result/root_hash/",
      "range": {
        "startLine": 290,
        "startChar": 28,
        "endLine": 290,
        "endChar": 34
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26a325df_551b07f6",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "I think this process should just be hidden away in a function in avb_aftl_validate.c in order to avoid a developer not following the process.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 61
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4490ba0d_c1eae587",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Shouldn\u0027t the keys backed into the device be in DER format to safe space? I don\u0027t have a strong opinion though.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 60,
        "endChar": 73
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29dc93bb_d11b2c64",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "s/sha256/SHA256/ to make it consistent the rest.",
      "range": {
        "startLine": 64,
        "startChar": 14,
        "endLine": 64,
        "endChar": 20
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "964f14f9_11483224",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Nit: The return value can probably of a smaller integer size.",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 8
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a857ec09_f862c6f3",
        "filename": "libavb_aftl/avb_ops_aftl.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1451494
      },
      "writtenOn": "2020-01-23T15:01:28Z",
      "side": 1,
      "message": "Shouldn\u0027t there be a list of function pointers here like it is in\nhttps://android.googlesource.com/platform/external/avb/+/refs/heads/master/libavb_atx/avb_atx_ops.h ?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 2
      },
      "revId": "525d5eb130835a7ab44c9733cf4d3c8514bd5afb",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}