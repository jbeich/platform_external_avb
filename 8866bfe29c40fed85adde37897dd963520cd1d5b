{
  "comments": [
    {
      "key": {
        "uuid": "8d26322b_4d21abff",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2020-02-04T16:00:48Z",
      "side": 1,
      "message": "Is this something which is stored on disk? It doesn\u0027t look like it since there are pointers in the struct... if you look at the Avb*Descriptor structs they don\u0027t have pointers in them and but do have docs that variable-length fields are stored after the struct and tells the user how to get them.\n\nThe benefit of this - and the reason that AVB_ATTR_PACKED is used - is that the returned Avb*Descriptor pointers point into the loaded data and no dynamic allocation is performed. E.g. the on-disk data format matches the struct, bit for bit. The downside is that it\u0027s pretty annoying to have to deal with them... have to byteswap and it\u0027s annoying to get the variable-length fields (esp. if there\u0027s more than one)... but the upside is that this only happens at the time of use, not the time of parsing. So that\u0027s the tradeoff.\n\nSince you use pointers, it looks like you\u0027re allocating these structs dynamically [1] so there\u0027s no need to use AVB_ATTR_PACKED here.\n\n[1] : btw, where/how are they freed?",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 17
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3550f40_502c95fe",
        "filename": "libavb_aftl/avb_aftl_types.h",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1079886
      },
      "writtenOn": "2020-02-04T16:07:12Z",
      "side": 1,
      "message": "I can remove the AVB_ATTR_PACKED parts, there are going to be things that are dynamically allocated. The allocation and free logic is coming in a future cl.",
      "parentUuid": "8d26322b_4d21abff",
      "range": {
        "startLine": 63,
        "startChar": 2,
        "endLine": 63,
        "endChar": 17
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "097c3e11_a13fb330",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2020-02-04T16:00:48Z",
      "side": 1,
      "message": "This seems like it should be a private function and not visible to libavb_aftl users? I mean, I take it you don\u0027t expect libavb_aftl users to call this? (My guess is that they just need to call aftl_verify_vbmeta_hash() and then aftl_verify_icp_root_hash() and that\u0027s it.)\n\nDitto for the functions below since they\u0027re not prefix with aftl_ and thus pollutes the global namespace ... and thus may conflict with whatever else a libavb*-using bootloader already has.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 60,
        "endChar": 80
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "214a8eb7_7efe1c4a",
        "filename": "libavb_aftl/avb_aftl_validate.h",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1079886
      },
      "writtenOn": "2020-02-04T16:07:12Z",
      "side": 1,
      "message": "good point, there is no reason for libavb_aftl users to call these, so will switch these to private.",
      "parentUuid": "097c3e11_a13fb330",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 60,
        "endChar": 80
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1490bfc_1e6c263a",
        "filename": "test/avb_aftl_validate_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2020-02-04T16:00:48Z",
      "side": 1,
      "message": "Should be able to use normal memcpy(3) since this is a host-side test.",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 14
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cc9b75c_3b581e59",
        "filename": "test/avb_aftl_validate_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 61,
      "author": {
        "id": 1079886
      },
      "writtenOn": "2020-02-04T16:07:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f1490bfc_1e6c263a",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 61,
        "endChar": 14
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ba49eda_04785670",
        "filename": "test/avb_aftl_validate_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2020-02-04T16:00:48Z",
      "side": 1,
      "message": "Did you consider storing this in test/data/ and load it from there? IIRC, we do this from other tests.",
      "range": {
        "startLine": 139,
        "startChar": 13,
        "endLine": 139,
        "endChar": 79
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e9cf4c_da08236d",
        "filename": "test/avb_aftl_validate_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 139,
      "author": {
        "id": 1079886
      },
      "writtenOn": "2020-02-04T16:07:12Z",
      "side": 1,
      "message": "Coming in a future CL, especially since there are more like this in the allocation/free test suite.",
      "parentUuid": "6ba49eda_04785670",
      "range": {
        "startLine": 139,
        "startChar": 13,
        "endLine": 139,
        "endChar": 79
      },
      "revId": "8866bfe29c40fed85adde37897dd963520cd1d5b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}