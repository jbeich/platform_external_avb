{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4e3fb2b1_5b0baec7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-21T17:48:12Z",
      "side": 1,
      "message": "@aliceywang@google.com no rush here, I imagine we\u0027ll both be taking time off so we can pick it up again in Jan. Thanks!",
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad3724e2_7f20cc2a",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-21T17:48:12Z",
      "side": 1,
      "message": "I\u0027ve added a section to the [API design doc](http://docs/document/d/1SbZmMQWAfanGlo554j6NDHSrfYAUjirn0WaLksFfq6c?tab\u003dt.0#heading\u003dh.l4l2mvj2bmki) discussing this API a bit and a few other potential options, if it\u0027s useful.",
      "range": {
        "startLine": 30,
        "startChar": 11,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "deed63b2_7d098943",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "We have consistently used `CStr` instead of `str` up to this point for partition names. Can we maintain this consistency by continuing to use `CStr` here, to allow users to handle the string in a uniform way?",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f574b7f1_306b8b94",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-09T01:15:36Z",
      "side": 1,
      "message": "Unfortunately it would require allocation. While libavb uses nul-terminated strings for partition names everywhere else, in the descriptor blob it uses a length + data encoding with no termination, so there is no valid `CStr` available.\n\nWe could allocate and transform to `CStr` here, but it seemed more flexible to provide the data we have and the user can allocate and transform it to `CStr` if needed. Most of the time I think they will be able to avoid allocation if they just want to compare strings by converting their `CStr` to `str` instead which is cheaper, e.g.:\n\n```\nif EXPECTED_PARTITION_CSTR.to_str()? \u003d\u003d hash_descriptor.partition_name() {\n  ...\n}\n```\n\nBut if you think we should just always allocate a `CStr` here for API consistency I can switch over.",
      "parentUuid": "deed63b2_7d098943",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95dd795f_055f86f3",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-09T11:16:35Z",
      "side": 1,
      "message": "\u003e Unfortunately it would require allocation. \n\nBut `CStr` is only a wrapper around the given pointer, I don\u0027t think it requires any additional allocation.",
      "parentUuid": "f574b7f1_306b8b94",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2216a930_be00525a",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "It does wrap existing data, but `CStr` requires that the wrapped data be nul-terminated, which this data is not. AFAIK there is no way to create a `CStr` directly from non-terminated data, we have to allocate a nul-terminated copy via `CString::new()`, and then you could get a `CStr` from that copy.\n\nAdded a bit more info to the docs to this effect, but LMK if you want me to just go ahead and allocate internally here.",
      "parentUuid": "95dd795f_055f86f3",
      "range": {
        "startLine": 44,
        "startChar": 8,
        "endLine": 44,
        "endChar": 32
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7709b4f6_6fa20bd3",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "How about creating a mutable instance of `AvbHashDescriptor` and using it in this context to avoid using `MaybeUninit`? we can include the `--with-derive-default` option in the bindgen configuration to easily generate a default value.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4168ba9f_f2a4b0d1",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 71,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7709b4f6_6fa20bd3",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 51
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f553d2fc_c6cda755",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "nit: Can we do this cast in the beginning of this function (line 69) to avoid casting the `contents.as_ptr()` to `*const AvbHashDescriptor` twice?",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 80
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ccc376c_feeeb992",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2024-01-03T16:49:33Z",
      "side": 1,
      "message": "If I understand this correctly you\u0027re converting an `\u0026[u8]` to an `\u0026AvbHashDescriptor` via a pointer. Could you use `zerocopy::FromBytes` to do this safely? You\u0027d need to derive `FromBytes` on `AvbHashDescriptor`.",
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e658af4_bdd4030f",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-09T01:15:36Z",
      "side": 1,
      "message": "I\u0027ll try it out thanks.",
      "parentUuid": "9ccc376c_feeeb992",
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "051522da_04ce43c0",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f553d2fc_c6cda755",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 80
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbbb6c35_76ce2b81",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Yeah that makes the code much nicer, thanks. I struggled a bit to get the `Android.bp` dependencies set up correctly so that `zerocopy` could be a dependency of both the bindgen and this lib, but eventually found something that seems to compile and hopefully isn\u0027t totally awful.",
      "parentUuid": "0e658af4_bdd4030f",
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d26dbc4_b6b713c7",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 101,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-12T00:48:54Z",
      "side": 1,
      "message": "Hmm nevermind, this seems to have broken another dependency\u0027s ability to find a totally unrelated crate (`zip`)? I\u0027ll have to keep poking around and see if I can find the magic configuration to allow this.",
      "parentUuid": "fbbb6c35_76ce2b81",
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca774dfc_18fe85e2",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 110,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "Should we keep `raw_data` even though all its information has already been parsed? It seems redundant to have this duplicate information in the struct.",
      "range": {
        "startLine": 110,
        "startChar": 12,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70372a68_2ab104e4",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 110,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-09T01:15:36Z",
      "side": 1,
      "message": "Yeah I think this should be fine, I thought it might be useful for the user to have access to the raw data just in case they need to do something we don\u0027t support, but I can take it out.",
      "parentUuid": "ca774dfc_18fe85e2",
      "range": {
        "startLine": 110,
        "startChar": 12,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f80ea19e_1d37691b",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 110,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-09T11:16:35Z",
      "side": 1,
      "message": "Personally, I feel it would be clearer to omit it, or alternatively, we can keep it but parse the information lazily. The problem with maintaining both the parsed fields and the raw information is that we also need to consider keeping them in sync.",
      "parentUuid": "70372a68_2ab104e4",
      "range": {
        "startLine": 110,
        "startChar": 12,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8e87b55_4d5c7571",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 110,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Ack, will remove.\n\nIIUC, since we\u0027re storing a non-`mut` slice the data is guaranteed to be constant so we don\u0027t need to worry about sync issues, but since I don\u0027t really have a use case for the raw data we might as well omit it for now.",
      "parentUuid": "f80ea19e_1d37691b",
      "range": {
        "startLine": 110,
        "startChar": 12,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ab4020a_36e6adb7",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "Should we move this check to the beginning of the function `HashDescriptor::new` just before the casting?",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 175,
        "endChar": 55
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae4e4218_92b7777a",
        "filename": "rust/src/descriptor/hash.rs",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Ack, alignment is now handled by `zerocopy` instead.",
      "parentUuid": "4ab4020a_36e6adb7",
      "range": {
        "startLine": 175,
        "startChar": 0,
        "endLine": 175,
        "endChar": 55
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55c79c98_a7704720",
        "filename": "rust/src/descriptor/util.rs",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-01-02T10:56:19Z",
      "side": 1,
      "message": "nit: The compiler should be able to deduce this type automatically.",
      "range": {
        "startLine": 36,
        "startChar": 12,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e6d90fe_e021d14b",
        "filename": "rust/src/descriptor/util.rs",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-01-11T18:03:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55c79c98_a7704720",
      "range": {
        "startLine": 36,
        "startChar": 12,
        "endLine": 36,
        "endChar": 19
      },
      "revId": "1fb850157c451a5bb9060fe77c851dc619fa7aaf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}