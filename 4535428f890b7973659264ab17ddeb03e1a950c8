{
  "comments": [
    {
      "key": {
        "uuid": "9a4d4b75_09a4ad12",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 1415,
      "author": {
        "id": 1108565
      },
      "writtenOn": "2018-11-20T16:36:53Z",
      "side": 0,
      "message": "Question, shouldn\u0027t this code exist for upgrading devices and have a if (!dynamic_partitions) around it?\nI guess libavb is isolated into bootloaders, but are partner\u0027s not supposed to upgraded to Q libavb in their bootloaders? If the answer is NO, then this seems ok. If the answer is \u0027yes\u0027, then we may need that conditional.",
      "range": {
        "startLine": 1410,
        "startChar": 4,
        "endLine": 1415,
        "endChar": 7
      },
      "revId": "4535428f890b7973659264ab17ddeb03e1a950c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8b879bc_7d3e7786",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 1415,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2018-11-21T02:27:44Z",
      "side": 0,
      "message": "\u003e  if (!dynamic_partitions) around it?\n\nThere is no dynamic_partition logic in libavb, and I\u0027m not sure should we add it.\nThe change David did before is try to load vbmeta from the beginning (for vbmeta_system and vbmeta_vendor) when no AVB footer is found.\nhttps://android-review.googlesource.com/c/platform/external/avb/+/727488\n\n\u003e but are partner\u0027s not supposed to upgraded to Q libavb in their bootloaders? \nIIRC, we don\u0027t have such a requirement.\nBecause if this is yes, that means we\u0027ll require bootloader OTA in each Android release, which most OEMs don\u0027t want do to this unless for critical bug fix.",
      "parentUuid": "9a4d4b75_09a4ad12",
      "range": {
        "startLine": 1410,
        "startChar": 4,
        "endLine": 1415,
        "endChar": 7
      },
      "revId": "4535428f890b7973659264ab17ddeb03e1a950c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26dfdf39_1e68e171",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 1415,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-11-26T16:49:12Z",
      "side": 0,
      "message": "The way libavb works is that root\u003d\u003cwhatever\u003e comes from libavb so that\u0027s why this code is here. Typically this root\u003d\u003cwhatever\u003e is ingested via the kernel cmdline snippets but in this case we don\u0027t have any of that.\n\nWe can\u0027t change this behavior because existing boot loaders already depend on it. Also remember that libavb is used outside Android (Android Things etc.) so we can\u0027t break anything.\n\nFor the case of dynamic partitions there will never be a system${ab_suffix} GPT partition so I think the right thing to do here is to use the get_unique_guid_for_partition() operation to test for the presence of a system partition and only put root\u003dPARTUUID\u003d$(ANDROID_SYSTEM_PARTUUID) there if found.",
      "parentUuid": "c8b879bc_7d3e7786",
      "range": {
        "startLine": 1410,
        "startChar": 4,
        "endLine": 1415,
        "endChar": 7
      },
      "revId": "4535428f890b7973659264ab17ddeb03e1a950c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec80346c_517c47f7",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 1415,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2018-11-27T10:12:23Z",
      "side": 0,
      "message": "Agree your suggestion is better, thanks!",
      "parentUuid": "26dfdf39_1e68e171",
      "range": {
        "startLine": 1410,
        "startChar": 4,
        "endLine": 1415,
        "endChar": 7
      },
      "revId": "4535428f890b7973659264ab17ddeb03e1a950c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}