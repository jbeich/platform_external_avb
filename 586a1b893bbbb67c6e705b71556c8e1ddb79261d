{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fe4dbaff_d6530a45",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "Can we move convert this into a test if this is only a check?",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 199,
        "endChar": 57
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "916163cf_32818115",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "That makes more sense, thanks. Looks like the unittests in this file also accidentally got dropped when we switched to integration tests, adding them back in as separate targets.",
      "parentUuid": "fe4dbaff_d6530a45",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 199,
        "endChar": 57
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ca12c7_5fdbe9a0",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "IoResult",
      "range": {
        "startLine": 238,
        "startChar": 16,
        "endLine": 238,
        "endChar": 22
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94fa80dc_4b62cd59",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9ca12c7_5fdbe9a0",
      "range": {
        "startLine": 238,
        "startChar": 16,
        "endLine": 238,
        "endChar": 22
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59f3ecff_e3a0ed47",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "IoResult\u003c()\u003e?",
      "range": {
        "startLine": 239,
        "startChar": 40,
        "endLine": 239,
        "endChar": 59
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "641d0446_ed2cc262",
        "filename": "rust/src/error.rs",
        "patchSetId": 3
      },
      "lineNbr": 239,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59f3ecff_e3a0ed47",
      "range": {
        "startLine": 239,
        "startChar": 40,
        "endLine": 239,
        "endChar": 59
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5326b7c2_2817b4f6",
        "filename": "rust/src/ops.rs",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "I don\u0027t think it is necessary to break the rule here. There\u0027s no problem with `_partition`.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 88
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "594ea00f_33ffed6e",
        "filename": "rust/src/ops.rs",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "It seemed a bit weird in the generated Rustdoc to have a public trait API with an underscored argument name, but if you think it\u0027s better to leave it I don\u0027t have a strong preference.",
      "parentUuid": "5326b7c2_2817b4f6",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 88
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b4a2ff1_9ef93a02",
        "filename": "rust/src/ops.rs",
        "patchSetId": 3
      },
      "lineNbr": 755,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "Instead of adding this, can we just use some conditional branch to check `uuid` feature like `if cfg!(feature \u003d \"uuid\") {}` ?",
      "range": {
        "startLine": 755,
        "startChar": 0,
        "endLine": 755,
        "endChar": 85
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f2ac5fa_96bbd7db",
        "filename": "rust/src/ops.rs",
        "patchSetId": 3
      },
      "lineNbr": 755,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "An `if` branch compiles the block which would require the dependency library:\n\n```\n// only include this lib for uuid builds\n#[cfg(feature \u003d \"uuid\")]\nuse uuid::Uuid;\n\nfn foo() {\n  if cfg!(feature \u003d \"uuid\") {\n    // This gets compiled even in non-uuid builds, which breaks\n    // since we don\u0027t have the dependency library.\n    Uuid::bar();\n  }\n}\n```\n\nBut it looks like I can apply `unused_variables` to individual parameters to limit the scope a bit.",
      "parentUuid": "1b4a2ff1_9ef93a02",
      "range": {
        "startLine": 755,
        "startChar": 0,
        "endLine": 755,
        "endChar": 85
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "061d113c_afbc2e2c",
        "filename": "rust/src/verify.rs",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-01T08:26:58Z",
      "side": 1,
      "message": "Should we just let `SlotVerifyData` take `_ops: \u0026\u0027a dyn Ops` to ensure that `SlotVerifyData` is valid as long as `_ops`?",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 195,
        "endChar": 35
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1ca9cc5_cff8d96d",
        "filename": "rust/src/verify.rs",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-01T18:19:40Z",
      "side": 1,
      "message": "SG, I think `PhantomData` does the same thing, but not 100% sure. Just borrowing the reference seems cleaner. We have to implement `PartialEq` ourselves in this case but it\u0027s easy enough.",
      "parentUuid": "061d113c_afbc2e2c",
      "range": {
        "startLine": 193,
        "startChar": 4,
        "endLine": 195,
        "endChar": 35
      },
      "revId": "586a1b893bbbb67c6e705b71556c8e1ddb79261d",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}