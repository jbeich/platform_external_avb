{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "18a3131b_1a417eab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-08T16:40:56Z",
      "side": 1,
      "message": "Hi Andrew, would you mind taking a look at the unsafe code here when you have a moment? Thanks!",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4908b2ad_2aec388c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-15T17:55:59Z",
      "side": 1,
      "message": "@aliceywang@google.com quick ping, no huge rush here but lmk if there\u0027s anyone else you would like me to run this by. Thanks!",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4043bfe_0b5b0a78",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "Oh sorry. I didn\u0027t realize it was my turn to review since my name wasn\u0027t in bold on gerrit.",
      "parentUuid": "4908b2ad_2aec388c",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40fb84cb_a10d0f9f",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "If one descriptor in the iteractor fails validation with functions like `avb_descriptor_validate_and_byteswap` or `checked_add`, it means the vbmeta is corrupted in some way. I don\u0027t think we should simply ignore this failure and continue processing the remaining descriptors.",
      "range": {
        "startLine": 46,
        "startChar": 41,
        "endLine": 46,
        "endChar": 91
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "536c6ce7_e9465e51",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-18T19:31:09Z",
      "side": 1,
      "message": "Removed in newest patchset.",
      "parentUuid": "40fb84cb_a10d0f9f",
      "range": {
        "startLine": 46,
        "startChar": 41,
        "endLine": 46,
        "endChar": 91
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccef2e66_4881795d",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-12-11T16:24:27Z",
      "side": 1,
      "message": "Why get this if you\u0027re just going to ignore it?",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b84a35d_ca2e2a3a",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-11T16:35:44Z",
      "side": 1,
      "message": "I\u0027ll be using it shortly in the next patch on top of this one (https://android-review.git.corp.google.com/c/platform/external/avb/+/2857728/4/rust/src/descriptor/mod.rs), I thought it was useful here to lay out the general structure of what I\u0027m going to do and then apply the specific descriptor handling in the followup CL but if this is more confusing than helpful I\u0027m happy to remove it.",
      "parentUuid": "ccef2e66_4881795d",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60bfa444_5b67b308",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-12-11T16:55:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "4b84a35d_ca2e2a3a",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb79cdc8_baf2ce28",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-12-11T16:24:27Z",
      "side": 1,
      "message": "Shouldn\u0027t this be offset by the size of `AvbDescriptor`, if you\u0027re trying to get bytes after the header?",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68646d7c_96774431",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-11T16:35:44Z",
      "side": 1,
      "message": "I need the entire header in order to cast it to the correct sub-type later. This is because each sub-type header doesn\u0027t start after the generic `AvbDescriptor`, but contains it, such as:\n\n```\nstruct AvbDescriptor {\n  type;\n  size;\n};\n\nstruct AvbFooDescriptor {\n  AvbDescriptor;\n  ... other data ...\n};\n```\n\nSo I need the entire object - including the generic `AvbDescriptor` header bytes - in order to later cast it to the actual sub-type.",
      "parentUuid": "fb79cdc8_baf2ce28",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "156b087a_cc746653",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-12-11T16:55:17Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "68646d7c_96774431",
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "756bc122_bbc7b3c3",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "Instead of treating all the errors in this part as an \"Unknown descriptor,\" it would be more appropriate to propagate the errors to the caller. For instance, if `avb_descriptor_validate_and_byteswap` or `checked_add` fail, it indicates that the underlying data is not a valid descriptor. In such cases, it would be clearer to send the respective error back to the caller rather than treating the data as an descriptor.",
      "range": {
        "startLine": 107,
        "startChar": 8,
        "endLine": 119,
        "endChar": 10
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "028d012a_9780e363",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-18T19:31:09Z",
      "side": 1,
      "message": "Ack, new approach processes all iterators ahead of time to propagate errors early.",
      "parentUuid": "756bc122_bbc7b3c3",
      "range": {
        "startLine": 107,
        "startChar": 8,
        "endLine": 119,
        "endChar": 10
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3edbc1c6_eee021b3",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "It\u0027s more clear to assign \"Unknown\" type here.",
      "range": {
        "startLine": 131,
        "startChar": 12,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae144a45_a4a33d7b",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-18T19:31:09Z",
      "side": 1,
      "message": "Removed `Unknown` type in latest patch, this now fails instead.",
      "parentUuid": "3edbc1c6_eee021b3",
      "range": {
        "startLine": 131,
        "startChar": 12,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "044aa006_20367ead",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-19T09:55:56Z",
      "side": 1,
      "message": "I think we can keep the \"Unknown\" type and assign it here. When a descriptor successfully passes the avb descriptor validation, it is indeed a descriptor. However, since we don\u0027t know its specific type, treating it as an unknown descriptor and including the raw data within is seems to be reasonable. This is also consistent with the behavior of the descriptor parser in avbtool [1].\n\n[1] https://cs.android.com/android/platform/superproject/main/+/main:external/avb/avbtool.py;l\u003d1951;drc\u003dd00d02c390e267ef43d93562864dd6e45966c435",
      "parentUuid": "ae144a45_a4a33d7b",
      "range": {
        "startLine": 131,
        "startChar": 12,
        "endLine": 131,
        "endChar": 21
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da847496_30537506",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "To be honest, instead of providing an iterator type with non-standart functions, it would be simpler to encapsulate the \"Descriptors\" within a vector of \"Descriptor\" enums. This approach would avoid any new memory allocation when iterating twice, and it removes the need for a separate \"reset\" function.",
      "range": {
        "startLine": 135,
        "startChar": 4,
        "endLine": 144,
        "endChar": 5
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c07759a7_1c7c654c",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-18T19:31:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da847496_30537506",
      "range": {
        "startLine": 135,
        "startChar": 4,
        "endLine": 144,
        "endChar": 5
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a603ecfc_4e334ccf",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-18T13:26:49Z",
      "side": 1,
      "message": "Why not build the `Descriptor` enum directly here? By doing so, the `Iterator` implementation will be much simpler, as we could directly return `self.descriptors.iter()`.\n\nAdditionally, we wouldn\u0027t need to an intermediate vector of `AvbDescriptor` pointers or track the current index, which doesn\u0027t seem to provide any immediate advantages.\n\nAnother benefit of building the `Descriptor` enum directly in `new()` is that we can return the errors encountered during the conversion process. Currently, when converting the pointer to an enum in `next()`, any errors during the conversion are completely ignored.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 92
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81d17bbf_00b37e0e",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-12-18T19:31:09Z",
      "side": 1,
      "message": "\u003e Why not build the Descriptor enum directly here? By doing so, the Iterator implementation will be much simpler, as we could directly return self.descriptors.iter().\n\nI was attempting to keep memory allocation to a minimum by only allocating one pointer rather than the full `Descriptor` objects. But maybe that\u0027s not super important here, it\u0027s not a huge amount of additional memory.\n\n\u003e Additionally, we wouldn\u0027t need to an intermediate vector of AvbDescriptor pointers or track the current index, which doesn\u0027t seem to provide any immediate advantages.\n\nlibavb doesn\u0027t provide any interface for accessing descriptors one at a time, only the entire set. So AFAIK the only options are:\n\n1. allocate some sort of storage such as a vector which does allow one-at-a-time access\n2. re-iterate over the set each time we need to access the next item (discarded as per [patch set 1](https://r.android.com/c/platform/external/avb/+/2857727/1..3/rust/src/descriptor/mod.rs#b74))\n3. expose a callback interface rather than an iterative interface - awkward and not user-friendly\n\nSo I think we will still need a vector unless we want to use option 2 or 3.\n\n\u003e Another benefit of building the Descriptor enum directly in new() is that we can return the errors encountered during the conversion process. Currently, when converting the pointer to an enum in next(), any errors during the conversion are completely ignored.\n\nI have reworked this to allocate and process the full Descriptor set up front so that we can return any errors immediately. It requires some extra memory but descriptors are fairly small so will still be less than the memory already allocated internally by libavb itself.",
      "parentUuid": "a603ecfc_4e334ccf",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 92
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb9dd9b4_2ee7af0d",
        "filename": "rust/src/descriptor/mod.rs",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-12-19T09:55:56Z",
      "side": 1,
      "message": "\u003e I was attempting to keep memory allocation to a minimum by only allocating one pointer rather than the full Descriptor objects. But maybe that\u0027s not super important here, it\u0027s not a huge amount of additional memory.\n\nIn terms of memory, the structure `Vec\u003cconst* AvbDescriptor\u003e` in PS3 contains pointers, while `Vec\u003cDescriptor\u003c\u0027a\u003e\u003e` holds enums that hold references to byte slices. Since both structures store references or pointers to the data rather than the actual data itself, their memory usage would be quite similar.\n\nI agree that Option 1 is a good choice. It is straightforward and efficient in terms of memory usage since it only requires a vector that holds references to the data in VbMeta, there\u0027s no significant memory allocation.\n\n\u003e I have reworked this to allocate and process the full Descriptor set up front so that we can return any errors immediately. It requires some extra memory but descriptors are fairly small so will still be less than the memory already allocated internally by libavb itself.\n\nThank you!",
      "parentUuid": "81d17bbf_00b37e0e",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 92
      },
      "revId": "a924721973e7e8e662b8da0f1844f9314d2c930a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}