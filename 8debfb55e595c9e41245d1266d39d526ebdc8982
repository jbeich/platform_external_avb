{
  "comments": [
    {
      "key": {
        "uuid": "68c95996_aad7e62b",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 662,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "Sorry to keep asking for docs... but at the end of this document, please add a new major section called \"Version history\" (at the same level as \"Device Integration\") with a single sub-section called \"Version 1.1\" and explain that in version 1.1 we added support for persistent digests (and link to the section).",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bd6803f_e9089b42",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 662,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68c95996_aad7e62b",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc6a6079_5a137cca",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "the device is in the LOCKED state.",
      "range": {
        "startLine": 670,
        "startChar": 53,
        "endLine": 670,
        "endChar": 66
      },
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cb21392_990321e5",
        "filename": "README.md",
        "patchSetId": 2
      },
      "lineNbr": 670,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc6a6079_5a137cca",
      "range": {
        "startLine": 670,
        "startChar": 53,
        "endLine": 670,
        "endChar": 66
      },
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80d37f5b_be7e73dd",
        "filename": "avbtool",
        "patchSetId": 2
      },
      "lineNbr": 2868,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "If |use_persistent_digest| is set, we also need to set |required_libavb_version_major,minor| in the vbmeta struct to 1.1 ... this needs to be done early in the function because of print_required_libavb_version.\n\nAlso need to do the same in add_hashtree_footer().\n\nWe also should check |required_libavb_version_major,minor| is set to 1.1. via an unit test if - and only if - this option is used.",
      "range": {
        "startLine": 2867,
        "startChar": 0,
        "endLine": 2868,
        "endChar": 30
      },
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d68f2464_fec9f6af",
        "filename": "avbtool",
        "patchSetId": 2
      },
      "lineNbr": 2868,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80d37f5b_be7e73dd",
      "range": {
        "startLine": 2867,
        "startChar": 0,
        "endLine": 2868,
        "endChar": 30
      },
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174b03a0_54c92675",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "I thought this would make whatever PREUPLOAD.cfg does complain about formatting? Are you running that hook?",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "508dd4b0_fe5df0b0",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "I\u0027m running all the files I touch through clang-format (using the .clang-format in the root dir). It seems some past CLs have not run it so there\u0027s a bit of collateral clean-up.\n\nOn a related note, avbtool needs pylint clean-up also but I\u0027m not adding that to this CL.",
      "parentUuid": "174b03a0_54c92675",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8ae711a_36c68506",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-16T20:50:17Z",
      "side": 1,
      "message": "Are you running clang-format manually or via \u0027repo upload\u0027? IIRC the PRESUBMIT.cfg clang-format hook does something (or runs its own clang-format frontend or something) such that it doesn\u0027t yield the same results....\n\nThe way I do this - and I think others as well - is\n\n 1. ensure you are in a shell setup with \u0027. build/envsetup.sh; lunch board-userdebug\u0027\n 2. commit your changes... upload with \u0027repo upload .\u0027 ... wait for clang-format to complain about formatting... respond with \u0027y\u0027 when it offers to make the needed changes\n 3. commit/fixup the changes made by clang-format\n 4. run \u0027repo upload .\u0027 again - this time it shouldn\u0027t complain\n\nI *think* it\u0027s possible to run clang-format manually as well but IIRC it depends on both your environment and how it\u0027s invoked... the only thing that worked reliably for me is the above.",
      "parentUuid": "508dd4b0_fe5df0b0",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfcda140_c1c5d628",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-21T01:28:29Z",
      "side": 1,
      "message": "I have it integrated into my editor -- but it automatically picks up .clang-format files (and external/avb has one) so the style should be right. repo upload does do the check and does not complain, but maybe it only checks code that has changed? In which case this might have slipped through the cracks for a while. In any case, I think it looks good like this!",
      "parentUuid": "e8ae711a_36c68506",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3a19601_6fd3ad84",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-21T20:58:46Z",
      "side": 1,
      "message": "Interesting. If I add \"bool bar\" at the end to what\u0027s in the repo now then \u0027git-clang-format --diff libavb/*.[ch]\u0027 spits (in part) this out:\n\n  static AvbSlotVerifyResult load_full_partition(\n -    AvbOps* ops, const char* part_name,\n -    uint64_t image_size, uint8_t** out_image_buf,\n -    bool* out_image_preloaded, bool bar) {\n +    AvbOps* ops, const char* part_name, uint64_t image_size,\n +    uint8_t** out_image_buf, bool* out_image_preloaded, bool bar) {\n\nwhich suggest existing formatting is fine except that it packs the arguments more efficiently. If I take your formatting it says \"clang-format did not modify any files\" which means that it\u0027s fine with that kind of formatting too. So apparently clang-format is fine with code formatted in multiple ways. Hmm.\n\n\u003e In any case, I think it looks good like this!\n\nI actually agree it looks better but one main reason for enforcing code formatting is that it should format the code so it looks exactly *one* way ... I guess we should look into why it doesn\u0027t do (and then reformat the code)... that but that\u0027s for another bug and/or CL :-)",
      "parentUuid": "cfcda140_c1c5d628",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "134352f1_d03e7ad4",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "So... are you are saying that IF --use_persistent_digest is used for \u0027foo\u0027 then the \u0027foo\u0027 partition must never be A/B\u0027ed? Is there a situation where you could use persistent digests but _still_ use A/B?",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ff89bff_c127b7b9",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "As discussed, we can\u0027t think of a persistent digest use case with A/B so that will be explicitly not supported.",
      "parentUuid": "134352f1_d03e7ad4",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c96ed001_2fa8814e",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-14T18:44:16Z",
      "side": 1,
      "message": "It seems like this is the wrong place to do this (we want to do as little work as long as there is still data to verify) ... why can\u0027t this be done at the end of avb_slot_verify() where all the other cmdline mangling is done? (That way we won\u0027t have to stash all the digest substitutions in a pre-allocated buffer...)",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "559fbc30_7a6759a5",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-16T03:09:34Z",
      "side": 1,
      "message": "We\u0027re not actually doing any mangling here, it will happen at the end of avb_slot_verify with the other mangling. I think this is the right place to do descriptor validation which is all the code here up to |avb_add_root_digest_substitution| below. And it doesn\u0027t seem right to read the digest from RPMB to validate it exists, throw it away, then loop through all the descriptors again later, and read the digest from RPMB again.",
      "parentUuid": "c96ed001_2fa8814e",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "047f67d6_7c519e48",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2018-02-16T20:50:17Z",
      "side": 1,
      "message": "OK, but I really don\u0027t like the use of global static variables (|digest_sub_list| in avb_cmdline.c)... that really doesn\u0027t fly since it breaks concurrent execution (which may be used in some testing setups) and global variables are generally bad.\n\nHow about instead making load_and_verify_vbmeta() take a \"char** additional_cmdline\" and then you add to |additional_cmdline| here (in a helper function to avoid this getting too long)... and then you make the avb_slot_verify() append this at the end of the cmdline. [0]\n\n[0] : It would be better to have some kind of private struct with all the parameters (including |ab_suffix|, |requested_partitions|, AvbOps) we pass around between all these functions (then |additional_cmdline| would just be a field we\u0027d add to there). But I\u0027m not going to make you do that since it\u0027s a lot of work... unless you want to!",
      "parentUuid": "559fbc30_7a6759a5",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29a61ff5_37e8c38d",
        "filename": "libavb/avb_slot_verify.c",
        "patchSetId": 2
      },
      "lineNbr": 980,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2018-02-21T01:28:29Z",
      "side": 1,
      "message": "re globals - agreed - done. Did not refactor further. :)",
      "parentUuid": "047f67d6_7c519e48",
      "revId": "8debfb55e595c9e41245d1266d39d526ebdc8982",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}