{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e81b845_9fc1866f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T00:07:56Z",
      "side": 1,
      "message": "I\u0027m not 100% confident in this approach, it\u0027s going to be difficult to test until I port all the callbacks and can do a full end-to-end verification, but I *think* this trait-based approach for callbacks should be compatible with pvmwf\u0027s usage and flexible enough for general use.\n\nI\u0027m working on adding the remaining callbacks piece by piece and hopefully should have a working proof of concept in a week or so.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "750a780c_4be5dcad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-08-31T07:52:58Z",
      "side": 1,
      "message": "Hi Andrew, could you review this cl?",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20b0e532_02f4e801",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Thanks for the extensive comments! There are some safety issues to resolve.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14450ef6_c028e44c",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "`ptr` also needs to be either null or valid, point to a NUL-terminated string within its allocation, and have no mutable aliases.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb6a28b8_43eb82ab",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done thanks.\n\nOne quick question re: mutable aliases, I\u0027m not sure if we can properly ensure this from C code, e.g. if libavb calls us doing something like this:\n\n```\nvoid do_callback(const char* ptr, ...) {\n  // bounces into Rust and this `cstr_to_str()` function\n}\n\nchar* buffer[32] \u003d \"foo\";  // mutable\ndo_callback(buffer, ...);  // passes immutable ptr while mutable alias exists\n```\n\nWould it be more appropriate to say something like \"memory must not be modified\", which is something we can be more certain of knowing that libavb is single-threaded? Or does this safety block really just apply to Rust so it just means we cannot have any mutable aliases in our Rust code?",
      "parentUuid": "14450ef6_c028e44c",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "388ac542_7c5d7d19",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "Saying \"must not be modified\" seems reasonable. Really the requirement is that the caller must obey Rust\u0027s aliasing rules, but that\u0027s a reasonable approximation.",
      "parentUuid": "eb6a28b8_43eb82ab",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19908056_cef4b172",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-09-05T23:47:58Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "388ac542_7c5d7d19",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cfb0139_a2ee29b5",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "This function should be unsafe, as it depends on the caller satisfying its safety requirements.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c751354_12435b40",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Ah cool, I thought `unsafe` was supposed to be used as little as possible to make the compiler happy, but that makes sense that it should instead just bubble up any time the caller needs to be aware of safety requirements.",
      "parentUuid": "5cfb0139_a2ee29b5",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0c2287c_108aeda8",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Again, this function should be marked as unsafe, and you should document the rest of the safety requirements (namely that the pointer must either be null or to a valid allocation of at least `size` bytes, aligned appropriately for `T`, with no mutable aliases).",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e27e1a99_c38f5839",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done.\n\nRe: properly-aligned, I really only want to implement this for `void` or `u8` pointers which have no alignment requirements (I think). Is there a good way in Rust to do generic bounds based on specific conditions like that e.g. `T: void | u8` or `T: align_of\u003cT\u003e() \u003d\u003d 1` or something like that? I couldn\u0027t find anything myself when searching around.",
      "parentUuid": "a0c2287c_108aeda8",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23eaa0ad_a478a9fa",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "Can you just take a `*mut u8` then rather than a `*mut T`?\n\nIf you really want to accept arbitrary types with no alignment requirements, then check out [`zerocopy::Unaligned`](https://docs.rs/zerocopy/latest/zerocopy/trait.Unaligned.html), but that seems unnecessarily complicated.\n\nAs for aliasing, as this function allows mutation of the data behind `ptr` the requirement is that nobody else accesses it at all within the lifetime `\u0027a`.",
      "parentUuid": "e27e1a99_c38f5839",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a724e77a_f6a39361",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-09-05T23:47:58Z",
      "side": 1,
      "message": "Makes sense, thanks, taking `u8` and requiring callers to cast if necessary sounds like the right approach.",
      "parentUuid": "23eaa0ad_a478a9fa",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3d6609_c3e89984",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-08-31T07:52:58Z",
      "side": 1,
      "message": "This still should be unsafe since nothing in the impl guarantees that T points to an aligned instance of T.\n\nAbout the naming, I feel it\u0027s more clear to call it `write` instead of introducing \na new name.",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b24cca68_5ccb1478",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-08-31T07:52:58Z",
      "side": 1,
      "message": "Should this be `pub(crate)` since this API is unrelated to `avb`?",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 4
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b2637c0_f9bec596",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Please also document the rest of the safety requirements for `ptr`.",
      "parentUuid": "ef3d6609_c3e89984",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a24a104b_a8d908ca",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "The module is not public, so these functions aren\u0027t exposed.",
      "parentUuid": "b24cca68_5ccb1478",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 4
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e77be2de_4ce8fa44",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Yeah I wasn\u0027t sure what the standard practice was here, I don\u0027t expect to ever expose this module as public API, so if it\u0027s OK to just leave this as `pub` it seems a bit simpler.",
      "parentUuid": "a24a104b_a8d908ca",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 105,
        "endChar": 4
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0400f0c_03f0c05a",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "\u003e About the naming, I feel it\u0027s more clear to call it write instead of introducing\na new name.\n\nAck makes sense, I thought it might be useful to differentiate since this does check for NULL whereas `write` doesn\u0027t. WDYT about `write_checked` or something like that?\n\n\u003e Please also document the rest of the safety requirements for ptr.\n\nDone",
      "parentUuid": "3b2637c0_f9bec596",
      "range": {
        "startLine": 105,
        "startChar": 4,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5f657a_c413e891",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Now that these are `unsafe`, do I need to document `SAFETY` comments here as well or is it ok to omit those for unit tests?",
      "range": {
        "startLine": 128,
        "startChar": 19,
        "endLine": 128,
        "endChar": 30
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "913712c0_d568c030",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "I think the lint will require that you write something, but it\u0027s fine if it\u0027s fairly short. See what happens when you run the tests.",
      "parentUuid": "0d5f657a_c413e891",
      "range": {
        "startLine": 128,
        "startChar": 19,
        "endLine": 128,
        "endChar": 30
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c6c2052_5eeaa704",
        "filename": "rust/src/util.rs",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-09-05T23:47:58Z",
      "side": 1,
      "message": "Presubmit seems OK without it as does local `atest`, leaving as-is for the time being.",
      "parentUuid": "913712c0_d568c030",
      "range": {
        "startLine": 128,
        "startChar": 19,
        "endLine": 128,
        "endChar": 30
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0547362f_efb779ac",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Who is responsible for guaranteeing this? If it\u0027s the trait implementor, then this should be an unsafe trait.\n\nOr better, return an owned buffer and free it when the verification data is dropped.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ada33327_df0c078f",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Yeah this one is a bit weird, usage is generally that the implementer has already loaded a kernel image into memory and they want to verify it, but they\u0027ll still need it afterwards in order to actually boot the kernel so we can\u0027t drop it.\n\nI\u0027ll mark unsafe thanks.",
      "parentUuid": "0547362f_efb779ac",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e51163ef_f54c9dbb",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "I\u0027m not quite following sorry. Is the requirement on the implementer or the caller? If it\u0027s on the implementer, then the trait should be unsafe rather than the function.",
      "parentUuid": "ada33327_df0c078f",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "805a988c_1cadeb9f",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-09-05T23:47:58Z",
      "side": 1,
      "message": "Gotcha, makes sense. Thinking about this more, I think I was confusing the functionality itself with how we\u0027re going to be using it.\n\nThere\u0027s nothing inherently unsafe about implementing or calling this function; internally to this library we\u0027re doing some unsafe stuff with the result by sending it into C functions, but that\u0027s external to the implementation or calling of the method and should be documented at the unsafe locations.",
      "parentUuid": "e51163ef_f54c9dbb",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09a362ff_411ef53b",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Should this be a Rustdoc comment?",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "035224e7_fba9dbdb",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done thanks, I wasn\u0027t sure if this was typically done for non-public API.",
      "parentUuid": "09a362ff_411ef53b",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4d287be_3d392cc7",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "It\u0027s not required, but if you\u0027ve written a comment anyway it might as well be Rustdoc. IDEs typically show them which can be helpful sometimes.",
      "parentUuid": "035224e7_fba9dbdb",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68c9841e_8d569af4",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Add an extra slash to each line to make this a Rustdoc comment.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b65b5b23_df82ec17",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68c9841e_8d569af4",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8592b5c9_c54d6aa8",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "This function should be unsafe.\n\nOr alternatively, have the `AvbOps` take ownership of `self`, I guess by boxing it.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "627e9679_b9f5755c",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done thanks, yeah I am probably over-complicating this but ideally this library would be no-alloc so I wanted to avoid boxing. Will go with `unsafe` for now.",
      "parentUuid": "8592b5c9_c54d6aa8",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1d3f535_050734da",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "Where is this function?",
      "range": {
        "startLine": 133,
        "startChar": 28,
        "endLine": 133,
        "endChar": 39
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebb3ae5e_d1d722f3",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Oops thanks leftover old naming, fixed.",
      "parentUuid": "a1d3f535_050734da",
      "range": {
        "startLine": 133,
        "startChar": 28,
        "endLine": 133,
        "endChar": 39
      },
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ab5530f_a80b3a3a",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "This method has safety requirements so it should be marked unsafe.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a2a9b69_e7433b9f",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ab5530f_a80b3a3a",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ad2cf75_58ad4b25",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "This should also be marked unsafe, it has a bunch of safety requirements on the pointers passed to it.",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ff474a6_5d000ea5",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done, these wrappers are only ever called from C so IIUC the `unsafe` marker is something of a no-op but it makes sense to document it.",
      "parentUuid": "3ad2cf75_58ad4b25",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a4aaa3f_144e8461",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:58:32Z",
      "side": 1,
      "message": "(Edit: I suppose that\u0027s not true re: no-op since we call these functions from our unit tests as well)",
      "parentUuid": "4ff474a6_5d000ea5",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f8f4867_599254a0",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-09-04T14:58:20Z",
      "side": 1,
      "message": "Yeah, even if it\u0027s only called from C it\u0027s still useful documentation.",
      "parentUuid": "2a4aaa3f_144e8461",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ec98369_0d6452cd",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1380243
      },
      "writtenOn": "2023-08-31T13:48:56Z",
      "side": 1,
      "message": "unsafe",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd2c1128_36ac2c3e",
        "filename": "rust/src/verify.rs",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-08-31T18:49:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ec98369_0d6452cd",
      "revId": "9315548cededd2a92e04596581c5334a3a1726a0",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}