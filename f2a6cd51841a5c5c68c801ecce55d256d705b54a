{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "108e94fc_1abeec23",
        "filename": "rust/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-11-13T09:42:26Z",
      "side": 1,
      "message": "nit: TBH, I think it would be clearer to have the API tests placed [outside the crate](https://doc.rust-lang.org/book/ch11-03-test-organization.html#integration-tests). By doing so, the tests can just access the crate like a regular user of the crate, and we will also avoid testing private methods.\n\nAdditionally, this approach allows for easy testing of the crate with different flags, by including the different libraries as test dependencies.",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 180,
        "endChar": 33
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caec12c0_7fc85c28",
        "filename": "rust/Android.bp",
        "patchSetId": 8
      },
      "lineNbr": 180,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-11-14T00:28:38Z",
      "side": 1,
      "message": "Ack, this depends on whether we can move the `TestOps` support class into a separate crate as well since we don\u0027t want to publicly expose `TestOps` in the library itself.\n\nIf we decide in the other comment thread to do this, I will move the API tests out too.",
      "parentUuid": "108e94fc_1abeec23",
      "range": {
        "startLine": 179,
        "startChar": 8,
        "endLine": 180,
        "endChar": 33
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd0df37d_cb101bea",
        "filename": "rust/src/ops.rs",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-11-13T09:42:26Z",
      "side": 1,
      "message": "Why does this need to be public ?",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e698cda4_0aea79a3",
        "filename": "rust/src/ops.rs",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-11-14T00:28:38Z",
      "side": 1,
      "message": "The `Ops` trait functions use this as a return type, so the user will want it as well so they can just copy-paste the trait code as a starter point for their implementation.\n\nIf we expect the implementation to instead use the full `Result\u003cT, IoError\u003e` type in the function signatures, then we should do the same here as well, but either way is fine with me.",
      "parentUuid": "bd0df37d_cb101bea",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 4
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7181f55b_98ecdce3",
        "filename": "rust/src/ops.rs",
        "patchSetId": 8
      },
      "lineNbr": 1088,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-11-13T09:42:26Z",
      "side": 1,
      "message": "Does this need to be public?\n\nBTW, can we make the test util module refactoring a separate cl to facilitate the review?",
      "range": {
        "startLine": 1088,
        "startChar": 0,
        "endLine": 1088,
        "endChar": 4
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83847bb8_7432a695",
        "filename": "rust/src/ops.rs",
        "patchSetId": 8
      },
      "lineNbr": 1088,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-11-14T00:28:38Z",
      "side": 1,
      "message": "\u003e Does this need to be public?\n\nOops leftover from a previous implementation, I will remove it in the next patch set\n\n\u003e BTW, can we make the test util module refactoring a separate cl to facilitate the review?\n\nWill do",
      "parentUuid": "7181f55b_98ecdce3",
      "range": {
        "startLine": 1088,
        "startChar": 0,
        "endLine": 1088,
        "endChar": 4
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d79800c_d93fa827",
        "filename": "rust/src/test_utils.rs",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-11-13T09:42:26Z",
      "side": 1,
      "message": "This module can be a different crate totally outside `src/` to keep the source code more focused and easy to understand.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 13
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78780f25_e2f044a2",
        "filename": "rust/src/test_utils.rs",
        "patchSetId": 8
      },
      "lineNbr": 17,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-11-14T00:28:38Z",
      "side": 1,
      "message": "I tried this originally, the problem I ran into is a circular dependency, because this needs the definitions in `ops.rs`, but the unittests in `ops.rs` need this `TestOps` fixture.\n\nI\u0027d be a bit nervous about deleting the `Ops` unittests entirely, testing each trait API individually allows more focused testing of each method and its behaviors than relying entirely on integration tests. But if you would prefer I can delete the `ops.rs` unittests and try to expand the integration tests to cover each individual trait API more thoroughly.\n\nOr maybe I was just doing something wrong in my implementation, do you know if there\u0027s an idiomatic Rust way to extract test fixtures for a crate out to a separate crate?",
      "parentUuid": "9d79800c_d93fa827",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 13
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65080dc1_5a3de7a6",
        "filename": "rust/src/verify.rs",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2023-11-13T09:42:26Z",
      "side": 1,
      "message": "This is weird as API, if the verification failed, why do we need SlotVerifyData? If the purpose of having SlotVerifyData is to access different errors within it, a possible alternative could be to directly encapsulate those errors within the main Error itself.\n\nFurthermore, this design hinders the ability of API callers to easily forward the error using the `?` or other error processing mechanism in rust as `anyhow` or `thiserror`.",
      "range": {
        "startLine": 290,
        "startChar": 28,
        "endLine": 290,
        "endChar": 49
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "677b8987_5111df20",
        "filename": "rust/src/verify.rs",
        "patchSetId": 8
      },
      "lineNbr": 290,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2023-11-14T00:28:38Z",
      "side": 1,
      "message": "Yeah I agree it\u0027s a bit awkward, but if `AVB_SLOT_VERIFY_FLAGS_ALLOW_VERIFICATION_ERROR` is set then libavb does return a full `SlotVerifyData` object even on verification error so we need to handle it somehow.\n\nI\u0027ll try tucking it inside the appropriate Error enum.",
      "parentUuid": "65080dc1_5a3de7a6",
      "range": {
        "startLine": 290,
        "startChar": 28,
        "endLine": 290,
        "endChar": 49
      },
      "revId": "f2a6cd51841a5c5c68c801ecce55d256d705b54a",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}