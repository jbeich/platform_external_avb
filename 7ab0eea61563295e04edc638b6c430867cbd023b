{
  "comments": [
    {
      "key": {
        "uuid": "10f7c68d_3d31f84d",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2017-10-30T16:43:32Z",
      "side": 1,
      "message": "We should take |num_bytes| and also return how many bytes was preloaded. As with read_from_partition() we allow partial I/O, e.g. |out_num_read| returned may be smaller than |num_bytes| passed in.\n\nAdditionally, to easier manage the life-time we should add a release_preloaded_partition() operation and guarantee that is called whenever the resulting AvbPartitionData is freed.",
      "revId": "7ab0eea61563295e04edc638b6c430867cbd023b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaffa3c1_3dc1c1f0",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1242600
      },
      "writtenOn": "2017-10-30T17:06:55Z",
      "side": 1,
      "message": "I can make the change, but I would like to understand the rationale here. I thought the size of the partition is provided by get_size_of_partition()? I currently do not see a need to support partial loading for preloaded partitions (at least for our use case). Are you suggesting there might be a use case where partial/header loading is required? Or you just think it is a safer API design in general? I see some code in avb_verify_slot() where get_size_of_partition() is not called when allow_verification_error is not set. Is this the thing you are worrying about?\n\nOn the other note, I don\u0027t think avb_verify_slot() should call a function like release_preloaded_partition(). Because the partition is \"preloaded\" into memory, it is not a memory allocation operation. avb_verify_slot() (or AvbPartitionData) does not own the memory, and therefore, it should not be avb_verify_slot()\u0027s job (or any libavb\u0027s functions\u0027 job) to release it. In fact, because the preloaded partition is normally the boot image, it will never be freed in the bootloader.",
      "parentUuid": "10f7c68d_3d31f84d",
      "revId": "7ab0eea61563295e04edc638b6c430867cbd023b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dc17c50_55a1a2b5",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1242600
      },
      "writtenOn": "2017-10-30T17:50:27Z",
      "side": 1,
      "message": "fwiw, I added an `expected_size` argument. This will handle the case where the preloaded part in memory is larger than required (which is my current understanding of the allow_verification_error thing). If the preloaded part is smaller than required, this function should set *out_pointer to NULL (to fall back to read_from_partition()) or just return a failure (to complain loudly).",
      "parentUuid": "aaffa3c1_3dc1c1f0",
      "revId": "7ab0eea61563295e04edc638b6c430867cbd023b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bef0a6da_72815460",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2017-10-30T17:52:31Z",
      "side": 1,
      "message": "libavb expects the data returned by get_preloaded_partition() is at least N bytes [1]. It seems prudent to check that the memory returned by get_preloaded_partition() actually satisfies this instead of just assuming the implementation knows how many bytes are expected... just added safety (it\u0027s not hard to imagine where this can get out of sync ... e.g. suppose partitions are resized and someone forgets to update vbmeta... or the other way around).\n\nAs for release_preloaded_partition(), I can see many examples where it\u0027s useful... the most obvious one being where the AvbOps implementation has a reference to the memory it\u0027s returning... in get_preloaded_partition() the impl would increase the ref count and in release_preloaded_partition() it\u0027s decreased. With this there\u0027s no question of \"for how long will this memory I returned still be used?\" ... essentially, this makes memory management in a system with reference counting a lot easier... sure, it might not matter in *your* application but it might matter in others.\n\nThe use of the verbs \"get\" and \"release\" is intentional - it\u0027s *not* about memory management in the strict sense of the word you are implying ... it\u0027s just so the libavb-using application can signal it is done using the memory returned by get_preloaded_partition().\n\n[1] : where N is from the HashDescriptor.image_siz if |allow_verification_error| is FALSE, otherwise either get_size_of_partition().",
      "parentUuid": "aaffa3c1_3dc1c1f0",
      "revId": "7ab0eea61563295e04edc638b6c430867cbd023b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105331a5_047b860b",
        "filename": "libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2017-10-30T17:57:19Z",
      "side": 1,
      "message": "\u003e added an `expected_size` argument\n\nAs I explained, I think it\u0027s better if get_preloaded_partition() takes a |num_bytes| param for how many bytes libavb asks for and returns the number of bytes in |out_num_bytes_preloaded| .... explaining that this number may be smaller than |num_bytes| but never bigger.",
      "parentUuid": "5dc17c50_55a1a2b5",
      "revId": "7ab0eea61563295e04edc638b6c430867cbd023b",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}