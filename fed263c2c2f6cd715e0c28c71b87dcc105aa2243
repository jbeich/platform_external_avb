{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d675ff6f_aad89093",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-03-20T12:33:08Z",
      "side": 1,
      "message": "Add Andrew for rust review",
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c1a4015_2880b3e5",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-03-20T12:33:08Z",
      "side": 1,
      "message": "Should we add something like `type Preloaded: \u0027a;` to the trait to make this clear in the trait declaration?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 83
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50f56ec9_6d65d924",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-03-20T15:44:01Z",
      "side": 1,
      "message": "I\u0027ve tried a few variations on this and the compiler doesn\u0027t seem to like aliasing lifetimes, the closest thing I could find that compiled was\n\n```\ntrait Preloaded\u003c\u0027a\u003e: \u0027a {}\n```\n\nbut it\u0027s not clear to me how to use this effectively in the `Ops` trait.\n\nWe could rename this lifetime if you think it would be useful, e.g. `Ops\u003c\u0027p\u003e` or `Ops\u003c\u0027preloaded\u003e`. I couldn\u0027t find any solid guidance about naming lifetimes so currently when there\u0027s only one lifetime I use `\u0027a` and when there\u0027s more than one I try to give them meaningful abbreviations (`\u0027o` for \"ops\", `\u0027p` for \"preloaded\"). But I\u0027m happy to adjust to another naming scheme.",
      "parentUuid": "6c1a4015_2880b3e5",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 83
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83e10ca4_d47aa4e4",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-03-21T16:41:00Z",
      "side": 1,
      "message": "Actually I thought something like this maybe could illustrate your comment directly in the code, that `\u0027a` is specifically associated with the preloaded type, not other things.\n\n```\npub trait Ops\u003c\u0027a\u003e {\n    type Preloaded: \u0027a;\n\n    fn get_preloaded(\u0026mut self) -\u003e Option\u003cSelf::Preloaded\u003e;\n}\n\n#[derive(Debug)]\nstruct MyOps\u003c\u0027a\u003e {\n    preloaded: Option\u003c\u0026\u0027a [u8]\u003e,\n}\n\nimpl\u003c\u0027a\u003e Ops\u003c\u0027a\u003e for MyOps\u003c\u0027a\u003e {\n    type Preloaded \u003d \u0026\u0027a [u8];\n\n    fn get_preloaded(\u0026mut self) -\u003e Option\u003cSelf::Preloaded\u003e {\n        self.preloaded\n    }\n}\n```\n\nIt seems to be working in playground https://play.rust-lang.org/?version\u003dstable\u0026mode\u003ddebug\u0026edition\u003d2021\u0026gist\u003deb197a97bed1145b533e6b8d201021f4",
      "parentUuid": "50f56ec9_6d65d924",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 83
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00383f29_bf030834",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-03-21T21:46:59Z",
      "side": 1,
      "message": "Ah gotcha thanks for the snippet!\n\nI think in this case it\u0027s an \"associated type\" so `Preloaded: \u0027a` is just a default; someone implementing `Ops` here could just re-define `Preloaded` as some other totally unrelated type (example: https://play.rust-lang.org/?version\u003dstable\u0026mode\u003ddebug\u0026edition\u003d2021\u0026gist\u003d142550e70e85bdf92144b3ab48da0704).\n\nSo it\u0027s usable but slightly confusing as it gives more freedom than we really want, since we only work if `Preloaded` is a `\u0026[u8]`.\n\nBut we can define a `Preloaded` type that aliases to `\u0026[u8]`, this way it has a name, but can\u0027t be overridden - it\u0027s always a byte slice. Added this approach in the new patch set, LMK if that\u0027s along the lines of what you were looking for.",
      "parentUuid": "83e10ca4_d47aa4e4",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 83
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7c8d903_6799253c",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-03-20T12:33:08Z",
      "side": 1,
      "message": "It feels a bit weird to associate two lifetime parameters with the returned trait object when the input is simply a raw pointer. It is unclear how we can infer two distinct lifetimes from a raw pointer input.",
      "range": {
        "startLine": 364,
        "startChar": 17,
        "endLine": 364,
        "endChar": 23
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1105dd26_9a255965",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-03-20T15:44:01Z",
      "side": 1,
      "message": "Yeah good point, this is a bit hand-wavy and doesn\u0027t really mean anything (the compiler also lets me use `\u0027static` here for both lifetimes since it just fills in whatever it needs to compile).\n\nReally here we\u0027re relying on the fact that all this ops work happens within a single call, i.e.:\n\n* user calls `slot_verify(ops, ...)`\n  * we set up the raw C structs from `ops`\n  * we call into libavb and convert callbacks using any arbitrary lifetimes here\n* return the verify result back to use\n\nSince the top level Rust `slot_verify()` function is borrowing `ops` for this entire process and enforces lifetimes, these internal short-lived conversions can use any lifetimes as their lifetimes never escape the single callback.\n\nBut you\u0027re right that it\u0027s really not clear here in the code. I\u0027ll play around and see if I can figure out anything more explicit.",
      "parentUuid": "f7c8d903_6799253c",
      "range": {
        "startLine": 364,
        "startChar": 17,
        "endLine": 364,
        "endChar": 23
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e96ded_716cead6",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1078119
      },
      "writtenOn": "2024-03-20T21:23:38Z",
      "side": 1,
      "message": "I\u0027ve posted a follow-up patch on this one (https://r.android.com/c/3008397) that demonstrates one possible solution of explicitly passing the `\u0027o` and `\u0027p` lifetimes throughout the callback chain.\n\nIt\u0027s not a perfect solution - it still requires properly specifying `\u0027o` and `\u0027p` in the right places and the compiler won\u0027t remind you if you forget. But it does allow the compiler to enforce these lifetimes when used correctly.\n\nMy initial thought is that it\u0027s not worth it - it seems to just exchange one SAFETY requirement for another, and the original requirement (don\u0027t hold onto the `Ops` object past the callback) is fairly hard to violate whereas the new requirement (plumb lifetimes through the entire call chain) is fairly easy to forget.\n\nBut I think both have merits so don\u0027t have a strong preference, or if there\u0027s another option I haven\u0027t thought of I\u0027m happy to try it out.",
      "parentUuid": "1105dd26_9a255965",
      "range": {
        "startLine": 364,
        "startChar": 17,
        "endLine": 364,
        "endChar": 23
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bbca099_3efefd7a",
        "filename": "rust/src/ops.rs",
        "patchSetId": 6
      },
      "lineNbr": 364,
      "author": {
        "id": 1958315
      },
      "writtenOn": "2024-03-21T16:41:00Z",
      "side": 1,
      "message": "Mm, thank you for investigating this! Frankly, I also don\u0027t have any better solution than what you are doing here. I\u0027m just curious if there\u0027s a rusty way to handle this.\n\n@mmaurer@google.com, what do you think? @qwandor@google.com is OOO today.",
      "parentUuid": "67e96ded_716cead6",
      "range": {
        "startLine": 364,
        "startChar": 17,
        "endLine": 364,
        "endChar": 23
      },
      "revId": "fed263c2c2f6cd715e0c28c71b87dcc105aa2243",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}